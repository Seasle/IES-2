/********************************
 * Imports
 ********************************/

import { Rule } from './rule.js';
import { Region, City } from './classes.js';

/********************************
 * Interfaces
 ********************************/

export interface IFilteredRules {
    rule: Rule;
    rating: number;
}

/********************************
 * Data
 ********************************/

const regions: Region[] = [
    new Region('Аксуский район', 39675, 12600),
    new Region('Алакольский район', 69679, 23700),
    new Region('Балхашский район', 30747, 37400),
    new Region('Енбекшиказахский район', 300427, 8300),
    new Region('Ескельдинский район', 46631, 4300),
    new Region('Жамбылский район', 166347, 19300),
    new Region('Илийский район', 209181, 7800, ),
    new Region('Карасайский район', 270673, 2000),
    new Region('Каратальский район', 46914, 24200),
    new Region('Кегенский район', 32415, null),
    new Region('Кербулакский район', 48860, 11500),
    new Region('Коксуский район', 41578, 7100, ),
    new Region('Панфиловский район', 129204, 10600),
    new Region('Райымбекский район', 41732, 14200),
    new Region('Сарканский район', 36962, 24400),
    new Region('Талгарский район', 196567, 3700),
    new Region('Уйгурский район', 63288, 8787)
];

const cities: City[] = [
    new City('Жаркент', 42617),
    new City('Капшагай‎', 61767),
    new City('Талгар', 42810),
    new City('Талдыкорган', 145403),
    new City('Текели', 31958)
];

/********************************
 * Rules
 ********************************/

const rules: Rule[] = [
    new Rule(regions, ['какое', 'сколько', 'население', 'количство', 'район', 'районе'], region => {
        if (region !== null) {
            return `В ${region.name} проживает ${region.population} человек`;
        } else {
            return `Мы не нашли такой регион`;
        }
    }),
    new Rule(regions, ['какой', 'какая', 'размер', 'площадь', 'район', 'района'], region => {
        if (region !== null) {
            return `Площадь ${region.name} составляет ${region.area}`;
        } else {
            return `Мы не нашли такой регион`;
        }
    }),
    new Rule(cities, ['какое', 'сколько', 'население', 'количство', 'город', 'городе', 'города'], city => {
        if (city !== null) {
            return `В городе ${city.name} проживает ${city.population} человек`;
        } else {
            return `Мы не нашли такой город`;
        }
    })
];

/********************************
 * Export
 ********************************/

export {
    regions,
    cities,
    rules
};